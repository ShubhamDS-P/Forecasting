# -*- coding: utf-8 -*-
"""Cocacola Sales Forecasting.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hJRDZ4BChe6Xp8iyMf9f0tE_Sq20RDq7
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from datetime import datetime,time

# Importing file from the local drive
from google.colab import files
cola = files.upload()

# Reading the imported file
cocacola = pd.read_excel("CocaCola_Sales_Rawdata.xlsx")
cocacola.head()

cocacola.describe()

cocacola.info()

# Creating the list with the name of quarters
quarters = ['q1','q2','q3','q4']

# Making a variable to store the qarter count
p = cocacola["Quarter"][0]
p[0:5]

# Making a column in the cocacola dataframe to store the name of the quarter without year count.
cocacola['quarters'] = 0
for i in range(42):
  p = cocacola["Quarter"][i]
  cocacola['quarters'][i] = p[0:2]
cocacola.head()

# Making a year column to store the years count.
cocacola["years"] = 0
for i in range(42):
  p = cocacola["Quarter"][i]
  cocacola["years"][i] = p[3:5]
cocacola.head()

# Creating the dummies for the quarter column.
quarter_dummies = pd.DataFrame(pd.get_dummies(cocacola['quarters']))
quarter_dummies

# Let's create a new dataframe by concatinating the original and dummy dataframe.
cocacola1 = pd.concat([cocacola,quarter_dummies],axis = 1)
cocacola1.head()

# Let's plot some graph for the given data.
cocacola.Sales.plot()

# Let's plot Heat map visualization.
heatmap_y_quarters = pd.pivot_table(data = cocacola, values = "Sales", index = "years", columns = "quarters",aggfunc = 'mean',fill_value = 0)
sns.heatmap(heatmap_y_quarters,annot = True, fmt = "g")

cocacola.head()

# Let's plot the boxplot with quarters and Sales.
sns.boxplot(x = "quarters",y = "Sales",data = cocacola)

# Let's plot boxplot with years and Sales.
sns.boxplot(x = "years", y = "Sales", data = cocacola)

# Now let's see the lineplot for the given data.
sns.lineplot(x = "years", y = "Sales", hue = "quarters", data = cocacola)

# Now after looking at the data from the various sides let's try to build the model for forecasting based on the provided data.
# First let's prepare various vaiables which are required to build the model.
cocacola1["t"] = np.arange(1,43)
cocacola1["t_squared"] = cocacola1["t"]*cocacola1["t"]
cocacola1["log_Sales"] = np.log(cocacola1["Sales"])
cocacola1.head()

# Now I will split the data in to train data and test data for model building.
train = cocacola1.head(36)
train.tail()

test = cocacola1.tail(6)
test

import statsmodels.formula.api as smf
# First model ----------- LINEAR----------------
linear_model = smf.ols('Sales~t', data = train).fit()
pred_linear = pd.Series(linear_model.predict(pd.DataFrame(test['t'])))
rmse_linear = np.sqrt(np.mean((np.array(test['Sales'])-np.array(pred_linear))**2))
rmse_linear

# Second model ------------EXPONENTIAL--------------
exp_model = smf.ols("log_Sales~t", data = train).fit()
pred_exp = pd.Series(exp_model.predict(pd.DataFrame(test['t'])))
rmse_exp = np.sqrt(np.mean((np.array(test["Sales"])-np.array(np.exp(pred_exp)))**2))
rmse_exp

# Third model ----------QUADRATIC-----------
quad_model = smf.ols('Sales~t+t_squared',data = train).fit()
pred_quad = pd.Series(quad_model.predict(test[["t","t_squared"]]))
rmse_quad = np.sqrt(np.mean((np.array(pred_quad)-np.array(test['Sales']))**2))
rmse_quad

# Fourth model ------------ADDITIVE SEASONALITY---------------
add_sea_model = smf.ols("Sales~Q1+Q2+Q3+Q4", data = train).fit()
pred_add_sea = pd.Series(add_sea_model.predict(test[['Q1','Q2','Q3','Q4']]))
rmse_add_sea = np.sqrt(np.mean(np.array(pred_add_sea)-np.array(test['Sales']))**2)
rmse_add_sea

# # Fifth model ---------------ADDITIVE SEASONALITY QUADRATIC--------------
# add_sea_quad_model = smf.ols('Sales~t+t_squared+Q1+Q2+Q3+Q4', data = train)
# pred_add_sea_quad = pd.Series(add_sea_quad_model.predict(test))
# rmse_add_sea_quad = np.sqrt(np.mean(np.array(pred_add_sea_quad)-np.array(test['Sales']))**2)
# rmse_add_sea_quad



######## There is something wrong which I can't find the solution to so we will skip this model. ###########

# # Sixth model ---------------MULTIPLICATIVE SEASONALITY---------------
# mul_sea_model = smf.ols('log_Sales~Q1+Q2+Q3+Q4',data = train)
# pred_mul_sea = pd.Series(mul_sea_model.predict(test[['Q1','Q2','Q3','Q4']]))
# rmse_mul_sea = np.sqrt(np.mean((np.array(pred_mul_sea)-np.array(test['Sales']))**2))
# rmse_mul_sea

# Seventh model-------------MULTIPLICATIVE ADDITIVE SEASONALITY----------------
mul_add_sea_model = smf.ols("log_Sales~t+Q1+Q2+Q3+Q4", data = train).fit()
pred_mul_add_sea = pd.Series(mul_add_sea_model.predict(test[['Q1','Q2','Q3','Q4','t']]))
rmse_mul_add_sea = np.sqrt(np.mean((np.array(np.exp(pred_mul_add_sea))-np.array(test['Sales']))**2))
rmse_mul_add_sea

# Creating the table for comparison of the rmse values of respective models to select the best model for the forecasting.

data = {"MODEL":pd.Series(["rmse_linear","rmse_exp","rmse_quad","rmse_add_sea","rmse_add_sea_quad","rmse_mul_sea","rmse_mul_add_sea"]),
        "RMSE_Values":pd.Series([rmse_linear,rmse_exp,rmse_quad,rmse_add_sea,"NA","NA",rmse_mul_add_sea])}
data

table_rmse = pd.DataFrame(data)
table_rmse

